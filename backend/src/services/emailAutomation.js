const nodemailer = require('nodemailer');
const { jobQueue } = require('./queueManager');

class EmailAutomationService {
    constructor() {
        this.transporter = null;
        this.isConfigured = false;
        this.templates = {
            jobAlert: {
                subject: 'New Job Opportunities Found - {{count}} matches',
                html: `
                    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                        <h2 style="color: #667eea;">New Job Opportunities</h2>
                        <p>We found {{count}} new job opportunities that match your criteria:</p>
                        
                        {{#each jobs}}
                        <div style="border: 1px solid #e2e8f0; border-radius: 8px; padding: 15px; margin: 10px 0;">
                            <h3 style="margin: 0 0 10px 0; color: #2d3748;">{{title}}</h3>
                            <p style="margin: 5px 0; color: #4a5568;"><strong>Company:</strong> {{company}}</p>
                            <p style="margin: 5px 0; color: #4a5568;"><strong>Location:</strong> {{location}}</p>
                            <p style="margin: 5px 0; color: #4a5568;"><strong>Source:</strong> {{source}}</p>
                            {{#if url}}
                            <a href="{{url}}" style="color: #667eea; text-decoration: none;">View Job â†’</a>
                            {{/if}}
                        </div>
                        {{/each}}
                        
                        <div style="margin-top: 30px; padding: 20px; background: #f7fafc; border-radius: 8px;">
                            <p style="margin: 0; color: #64748b; font-size: 14px;">
                                This is an automated notification from your AI Recruitment Agent.
                                <br>Search criteria: {{searchKeywords}} in {{searchLocation}}
                            </p>
                        </div>
                    </div>
                `
            },
            dailyDigest: {
                subject: 'Daily Job Discovery Report - {{date}}',
                html: `
                    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                        <h2 style="color: #667eea;">Daily Job Discovery Report</h2>
                        <p>Here's your daily summary for {{date}}:</p>
                        
                        <div style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px; margin: 20px 0;">
                            <div style="text-align: center; padding: 20px; background: #f8fafc; border-radius: 8px;">
                                <h3 style="margin: 0; font-size: 2em; color: #667eea;">{{totalJobs}}</h3>
                                <p style="margin: 5px 0; color: #64748b;">Total Jobs Found</p>
                            </div>
                            <div style="text-align: center; padding: 20px; background: #f8fafc; border-radius: 8px;">
                                <h3 style="margin: 0; font-size: 2em; color: #22c55e;">{{newCompanies}}</h3>
                                <p style="margin: 5px 0; color: #64748b;">New Companies</p>
                            </div>
                        </div>
                        
                        <h3>Top Sources:</h3>
                        <ul>
                            {{#each sources}}
                            <li>{{name}}: {{count}} jobs</li>
                            {{/each}}
                        </ul>
                        
                        <h3>Most Active Companies:</h3>
                        <ul>
                            {{#each companies}}
                            <li>{{name}}: {{jobCount}} openings</li>
                            {{/each}}
                        </ul>
                        
                        <div style="margin-top: 30px; padding: 20px; background: #f7fafc; border-radius: 8px;">
                            <p style="margin: 0; color: #64748b; font-size: 14px;">
                                Generated by your AI Recruitment Agent on {{timestamp}}
                            </p>
                        </div>
                    </div>
                `
            }
        };
        
        this.setupTransporter();
    }

    /**
     * Setup email transporter based on environment variables
     */
    setupTransporter() {
        const emailConfig = {
            service: process.env.EMAIL_SERVICE || 'gmail',
            host: process.env.SMTP_HOST,
            port: process.env.SMTP_PORT || 587,
            secure: process.env.SMTP_SECURE === 'true',
            auth: {
                user: process.env.EMAIL_USER,
                pass: process.env.EMAIL_PASS
            }
        };

        if (emailConfig.auth.user && emailConfig.auth.pass) {
            try {
                this.transporter = nodemailer.createTransporter(emailConfig);
                this.isConfigured = true;
                console.log('[EmailAutomation] Email service configured successfully');
            } catch (error) {
                console.error('[EmailAutomation] Failed to configure email service:', error);
                this.isConfigured = false;
            }
        } else {
            console.warn('[EmailAutomation] Email credentials not provided. Email notifications disabled.');
            this.isConfigured = false;
        }
    }

    /**
     * Send job alert email
     * @param {Array} jobs - Array of job objects
     * @param {string} recipientEmail - Recipient email address
     * @param {Object} searchCriteria - Search criteria used
     */
    async sendJobAlert(jobs, recipientEmail, searchCriteria = {}) {
        if (!this.isConfigured) {
            console.warn('[EmailAutomation] Email service not configured. Skipping job alert.');
            return { success: false, error: 'Email service not configured' };
        }

        if (!jobs || jobs.length === 0) {
            console.log('[EmailAutomation] No jobs to send in alert.');
            return { success: false, error: 'No jobs to send' };
        }

        try {
            const template = this.templates.jobAlert;
            const subject = template.subject.replace('{{count}}', jobs.length);
            
            // Simple template replacement (in production, use a proper template engine)
            let html = template.html
                .replace('{{count}}', jobs.length)
                .replace('{{searchKeywords}}', searchCriteria.keywords || 'Various')
                .replace('{{searchLocation}}', searchCriteria.location || 'Multiple locations');

            // Replace job list
            const jobsHtml = jobs.map(job => {
                return template.html.match(/{{#each jobs}}([\s\S]*?){{\/each}}/)[1]
                    .replace('{{title}}', job.title || 'Unknown Title')
                    .replace('{{company}}', job.company || 'Unknown Company')
                    .replace('{{location}}', job.location || 'Unknown Location')
                    .replace('{{source}}', job.source || 'Unknown Source')
                    .replace('{{url}}', job.url || '#');
            }).join('');

            html = html.replace(/{{#each jobs}}[\s\S]*?{{\/each}}/, jobsHtml);

            const mailOptions = {
                from: process.env.EMAIL_FROM || process.env.EMAIL_USER,
                to: recipientEmail,
                subject: subject,
                html: html
            };

            const result = await this.transporter.sendMail(mailOptions);
            console.log(`[EmailAutomation] Job alert sent to ${recipientEmail}`);
            
            return { 
                success: true, 
                messageId: result.messageId,
                jobCount: jobs.length 
            };
        } catch (error) {
            console.error('[EmailAutomation] Failed to send job alert:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * Send daily digest email
     * @param {Object} digestData - Daily digest data
     * @param {string} recipientEmail - Recipient email address
     */
    async sendDailyDigest(digestData, recipientEmail) {
        if (!this.isConfigured) {
            console.warn('[EmailAutomation] Email service not configured. Skipping daily digest.');
            return { success: false, error: 'Email service not configured' };
        }

        try {
            const template = this.templates.dailyDigest;
            const today = new Date().toLocaleDateString();
            
            let html = template.html
                .replace(/{{date}}/g, today)
                .replace('{{totalJobs}}', digestData.totalJobs || 0)
                .replace('{{newCompanies}}', digestData.newCompanies || 0)
                .replace('{{timestamp}}', new Date().toLocaleString());

            // Replace sources list
            if (digestData.sources && digestData.sources.length > 0) {
                const sourcesHtml = digestData.sources.map(source => 
                    `<li>${source.name}: ${source.count} jobs</li>`
                ).join('');
                html = html.replace(/{{#each sources}}[\s\S]*?{{\/each}}/, sourcesHtml);
            } else {
                html = html.replace(/{{#each sources}}[\s\S]*?{{\/each}}/, '<li>No data available</li>');
            }

            // Replace companies list
            if (digestData.companies && digestData.companies.length > 0) {
                const companiesHtml = digestData.companies.map(company => 
                    `<li>${company.name}: ${company.jobCount} openings</li>`
                ).join('');
                html = html.replace(/{{#each companies}}[\s\S]*?{{\/each}}/, companiesHtml);
            } else {
                html = html.replace(/{{#each companies}}[\s\S]*?{{\/each}}/, '<li>No data available</li>');
            }

            const subject = template.subject.replace('{{date}}', today);

            const mailOptions = {
                from: process.env.EMAIL_FROM || process.env.EMAIL_USER,
                to: recipientEmail,
                subject: subject,
                html: html
            };

            const result = await this.transporter.sendMail(mailOptions);
            console.log(`[EmailAutomation] Daily digest sent to ${recipientEmail}`);
            
            return { 
                success: true, 
                messageId: result.messageId 
            };
        } catch (error) {
            console.error('[EmailAutomation] Failed to send daily digest:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * Test email configuration
     * @param {string} testEmail - Email to send test to
     */
    async testEmailConfig(testEmail) {
        if (!this.isConfigured) {
            return { success: false, error: 'Email service not configured' };
        }

        try {
            const testMailOptions = {
                from: process.env.EMAIL_FROM || process.env.EMAIL_USER,
                to: testEmail,
                subject: 'AI Recruitment Agent - Email Test',
                html: `
                    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                        <h2 style="color: #667eea;">Email Configuration Test</h2>
                        <p>This is a test email from your AI Recruitment Agent.</p>
                        <p>If you received this email, your email automation is working correctly!</p>
                        <div style="margin-top: 30px; padding: 20px; background: #f7fafc; border-radius: 8px;">
                            <p style="margin: 0; color: #64748b; font-size: 14px;">
                                Test sent at: ${new Date().toLocaleString()}
                            </p>
                        </div>
                    </div>
                `
            };

            const result = await this.transporter.sendMail(testMailOptions);
            console.log(`[EmailAutomation] Test email sent to ${testEmail}`);
            
            return { 
                success: true, 
                messageId: result.messageId 
            };
        } catch (error) {
            console.error('[EmailAutomation] Test email failed:', error);
            return { success: false, error: error.message };
        }
    }

    /**
     * Get email service status
     */
    getStatus() {
        return {
            configured: this.isConfigured,
            service: process.env.EMAIL_SERVICE || 'gmail',
            user: process.env.EMAIL_USER ? '***configured***' : 'not configured',
            templates: Object.keys(this.templates)
        };
    }

    /**
     * Setup automatic job alerts based on queue events
     */
    setupAutomaticAlerts(recipientEmail, threshold = 5) {
        if (!this.isConfigured) {
            console.warn('[EmailAutomation] Cannot setup automatic alerts - email not configured');
            return;
        }

        let jobBuffer = [];
        let lastSent = Date.now();
        const minInterval = 30 * 60 * 1000; // 30 minutes minimum between alerts

        jobQueue.on('jobProcessed', (data) => {
            if (data.result === 'saved') {
                jobBuffer.push(data.job);
                
                // Send alert if threshold reached and enough time has passed
                if (jobBuffer.length >= threshold && (Date.now() - lastSent) > minInterval) {
                    this.sendJobAlert(jobBuffer, recipientEmail, {
                        keywords: 'Automated Discovery',
                        location: 'Various'
                    }).then(() => {
                        jobBuffer = [];
                        lastSent = Date.now();
                    });
                }
            }
        });

        console.log(`[EmailAutomation] Automatic alerts setup for ${recipientEmail} (threshold: ${threshold} jobs)`);
    }
}

// Create singleton instance
const emailAutomationService = new EmailAutomationService();

module.exports = {
    emailAutomationService,
    EmailAutomationService
};